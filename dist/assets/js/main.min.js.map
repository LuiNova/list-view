{"version":3,"sources":["app.js","main.js","components/infinite-scroller-experimental.js","components/infinite-scroller-v2.js","components/infinite-scroller.js","datasource/messages.js"],"names":["requirejs","config","baseUrl","paths","app","main","init","define","InfiniteScroller","InfiniteScrollerExperimental","Messages","scroller","document","querySelector","scrollerExp","messagesSource","url","dataEndpoint","this","infiniteScroller","swipeable","infiniteScrollerExp","dataSource","options","_classCallCheck","PHYSICAL_ITEMS","physicalItems","PAGE_SIZE","pageSize","PROXIMITY_BOUNDARY","proximityBoundary","itemsCacheData","loadingItemHeight","loadingItemWidth","loadingItems","firstPhysicalItemIndex","middlePhysicalItemIndex","lastPhysicalItemIndex","firstPhysicalItem","lastPhysicalItem","firstPhysicalItemTranslateY","lastPhysicalItemTranslateY","requestInProgress","target","targetBCR","targetX","startX","currentX","translateX","draggingItem","scrollRunway","createElement","scrollRunwayEndBefore","scrollRunwayEnd","style","position","height","width","transition","appendChild","previousScrollTop","addEventListeners","onResize","loadItems","_createClass","key","value","_this","window","addEventListener","e","onScroll","onTouchStart","onTouchMove","onTouchEnd","loadingItem","createLoadingElement","offsetHeight","offsetWidth","removeChild","delta","scrollTop","actualLastPhysicalItemTranslateY","proximityToLastPhysicalItem","proximityToFirstPhysicalItem","loadItemsUp","_this2","loadingHeight","i","hasLoadingItem","transform","classList","remove","nextIndexToPopulate","populateItems","slice","next","then","response","items","fromCache","currentCacheDataLength","length","itemTranslateY","add","itemIndex","hasReusableItem","item","render","dataset","translateY","calculatePhysicalItemsIndex","loadingItemTranslateY","populateItemsTop","itemBeforeFirstPhysicalItemIndex","reusableItemIndex","hasItem","itemsLength","Math","max","parseInt","_this3","contains","getBoundingClientRect","touches","pageX","willChange","requestAnimationFrame","update","threshold","abs","_this4","normalizedDragDistance","opacity","pow","isNearlyAtStart","parentNode","targetTranslateY","targetIndex","indexOf","targetDataIndex","id","splice","animateOtherItemsIntoPosition","resetTarget","startIndex","_this5","onAnimationComplete","removeEventListener","_","anchorScrollTop","firstAttachedItem","lastAttachedItem","virtualItems","virtualItemsCount","physicalItemsCount","loadedItems","anchorItem","anchorItemHeight","count","loadItemsExp","firstLoad","console","log","firstLoadItems","concat","populateItemsExp","push","scrollBoundary","scrollHeight","start","end","attachContent","pop","data","node","addItem","_this6","itemsData","loadingTemplate","messageTemplate","dataUrl","nextItem","nextPageToken","obj","Promise","resolve","reject","params","_typeof","Object","keys","map","encodeURIComponent","join","xhr","XMLHttpRequest","open","method","onload","status","statusText","onerror","send","pageToken","fetch","jsonResponse","JSON","parse","messages","cloneNode","div","src","author","photoUrl","textContent","name","timeSince","Date","updated","content","date","seconds","floor","interval"],"mappings":"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","file":"main.min.js","sourcesContent":["// For any third party dependencies, like jQuery, place them in the lib folder.\n\n// Configure loading modules from the lib directory,\n// except for 'app' ones, which are in a sibling\n// directory.\nrequirejs.config({\n    baseUrl: 'src/javascript',\n    paths: {\n        app: '../dist'\n    }\n});\n\n// Start loading the main app file. Put all of\n// your application logic in there.\nrequirejs(['main'], function(main) {\n    main.init();\n});","define('main', [\n    'components/infinite-scroller',\n    'components/infinite-scroller-experimental',\n    'datasource/messages'\n], function(\n    InfiniteScroller,\n    InfiniteScrollerExperimental,\n    Messages\n) {\n    'use strict';\n    \n    return {\n        init: function() {\n            const scroller = document.querySelector('#messages');\n            const scrollerExp = document.querySelector('#messages-exp');\n            const messagesSource = new Messages({\n                url: 'https://message-list.appspot.com',\n                dataEndpoint: '/messages'\n            });\n\n            if (scroller) {\n                this.infiniteScroller = new InfiniteScroller(scroller, messagesSource, {\n                    swipeable: true\n                });\n            }\n\n            if (scrollerExp) {\n                this.infiniteScrollerExp = new InfiniteScrollerExperimental(scrollerExp, messagesSource, {\n                    swipeable: true\n                });\n            }\n        }\n    };\n});","define('components/infinite-scroller-experimental',[\n], function() {\n    'use strict';\n    \n    const PHYSICAL_ITEMS = 20;\n    const PAGE_SIZE = 10;\n    const PROXIMITY_BOUNDARY = 300;\n\n    class InfiniteScroller {\n\n        constructor(scroller, dataSource, options) {\n            this.scroller = scroller;\n            this.dataSource = dataSource;\n\n            // Options\n            this.swipeable = options.swipeable;\n            this.PHYSICAL_ITEMS = options.physicalItems || PHYSICAL_ITEMS;\n            this.PAGE_SIZE = options.pageSize || PAGE_SIZE;\n            this.PROXIMITY_BOUNDARY = options.proximityBoundary || PROXIMITY_BOUNDARY;\n            \n            // This will hold a cache of the data sent from server\n            this.itemsCacheData = [];\n\n            this.loadingItemHeight = 0;\n            this.loadingItemWidth = 0;\n            this.loadingItems = [];\n\n            this.physicalItems = [];\n            this.firstPhysicalItemIndex = -1;\n            this.middlePhysicalItemIndex = -1;\n            this.lastPhysicalItemIndex = -1;\n            this.firstPhysicalItem = null;\n            this.lastPhysicalItem = null;\n            this.firstPhysicalItemTranslateY = 0;\n            this.lastPhysicalItemTranslateY = 0;\n\n            this.requestInProgress = false;\n\n            // Reference to current item\n            this.target = null;\n            this.targetBCR = null;\n            this.targetX = 0;\n            this.startX = 0;\n            this.currentX = 0;\n            this.translateX = 0;\n            this.draggingItem = false;\n\n            // Create element to force scroll\n            this.scrollRunway = document.createElement('div');\n            this.scrollRunwayEndBefore = 0;\n            this.scrollRunwayEnd = 0;\n            this.scrollRunway.style.position = 'absolute';\n            this.scrollRunway.style.height = '1px';\n            this.scrollRunway.style.width = '1px';\n            this.scrollRunway.style.transition = 'transform 0.2s';\n            this.scroller.appendChild(this.scrollRunway);\n\n            this.previousScrollTop = 0;\n\n            this.addEventListeners();\n\n            this.onResize();\n            this.loadItems();\n        }\n\n        addEventListeners() {\n            window.addEventListener('resize', (e) => this.onResize(e));\n\n            this.scroller.addEventListener('scroll', (e) => this.onScroll(e));\n\n            if (this.swipeable) {\n                this.scroller.addEventListener('touchstart', (e) => this.onTouchStart(e));\n                this.scroller.addEventListener('touchmove', (e) => this.onTouchMove(e));\n                this.scroller.addEventListener('touchend', (e) => this.onTouchEnd(e));\n            }\n        }\n\n        onResize(e) {\n            // On resize need to recalculate the translateY values for the elements\n            const loadingItem = this.dataSource.createLoadingElement();\n            this.scroller.appendChild(loadingItem);\n            this.loadingItemHeight = loadingItem.offsetHeight;\n            this.loadingItemWidth = loadingItem.offsetWidth;\n            this.scroller.removeChild(loadingItem);\n\n            // this.onScroll();\n        }\n\n        /**\n         * It then updates the visible\n         * elements, requesting more items from the dataSource if we have scrolled\n         * past the end of currently available content.\n         */\n        onScroll(e) {\n            if (this.requestInProgress) {\n                return;\n            }\n\n            const delta = this.scroller.scrollTop - this.previousScrollTop;\n            this.previousScrollTop = this.scroller.scrollTop;\n\n            /**\n             * if delta is greater than 0 then user is scrolling down\n             */\n            if (delta > 0) {\n                const actualLastPhysicalItemTranslateY = this.lastPhysicalItemTranslateY - (this.lastPhysicalItem.offsetHeight + 10);\n                const proximityToLastPhysicalItem = actualLastPhysicalItemTranslateY - (this.scroller.scrollTop + this.scroller.offsetHeight);\n\n                if (!this.requestInProgress && (proximityToLastPhysicalItem < this.PROXIMITY_BOUNDARY)) {\n                    this.loadItems();\n                }\n\n            } else if (delta < 0) {\n                const proximityToFirstPhysicalItem = this.scroller.scrollTop - this.firstPhysicalItemTranslateY;\n\n                if (!this.requestInProgress && this.firstPhysicalItemIndex !== 0 && (proximityToFirstPhysicalItem < this.PROXIMITY_BOUNDARY)) {\n                    this.loadItemsUp();\n                }\n            }\n        }\n\n        loadItems() {\n            this.requestInProgress = true;\n\n            let loadingHeight = this.lastPhysicalItemTranslateY;\n\n            // instead of appending 10 times, just append once\n            // let addingElems = false;\n            // const frag = document.createDocumentFragment();\n\n            // Loading items\n            for (let i = 0; i < this.PAGE_SIZE; i += 1) {\n                const hasLoadingItem = this.loadingItems[i];\n                const loadingItem = hasLoadingItem ? this.loadingItems[i] : this.dataSource.createLoadingElement();\n\n                loadingItem.style.position = 'absolute';\n                loadingItem.style.transform = `translateY(${loadingHeight}px)`;\n                loadingItem.style.width = '92%';\n                loadingItem.classList.remove('invisible');\n\n                // If loading item not in DOM then add it\n                if (!hasLoadingItem) {\n                    // addingElems = true;\n                    // frag.appendChild(loadingItem);\n                    this.scroller.appendChild(loadingItem);\n                }\n\n                this.loadingItems[i] = loadingItem;\n\n                loadingHeight += this.loadingItemHeight + 10; // loadingHeight is more of loadingTranslateYValue\n            }\n\n            // instead of appending 10 times, just append once\n            // if (addingElems) {\n            //     this.scroller.appendChild(frag);\n            // }\n\n            const nextIndexToPopulate = this.lastPhysicalItemIndex + 1;\n            // Check the cache\n            if (this.itemsCacheData[nextIndexToPopulate]) {\n                // use cache to populate items\n                this.populateItems(this.itemsCacheData.slice(nextIndexToPopulate, nextIndexToPopulate + 10), true);\n            } else {\n                // 10 items\n                this.dataSource.next().then((response) => {\n                    this.populateItems(response, false);\n                });\n            }\n        }\n\n        populateItems(items, fromCache) {\n            const currentCacheDataLength = this.itemsCacheData.length;\n            const nextIndexToPopulate = this.lastPhysicalItemIndex + 1;\n\n            // let itemTranslateY = 0;\n            let itemTranslateY = this.lastPhysicalItemTranslateY;\n\n            for (let i = 0; i < items.length; i += 1) {\n\n                if (this.loadingItems[i]) {\n                    this.loadingItems[i].classList.add('invisible');\n                }\n\n                const itemIndex = (nextIndexToPopulate + i) % this.PHYSICAL_ITEMS;\n                const hasReusableItem = this.physicalItems[itemIndex];\n                const item = hasReusableItem ? this.dataSource.render(items[i], this.physicalItems[itemIndex]) : this.dataSource.render(items[i]);\n\n                item.style.position = 'absolute';\n                item.style.transform = `translateY(${itemTranslateY}px)`;\n                item.dataset.translateY = itemTranslateY;\n                item.style.width = '92%';\n\n                if (!hasReusableItem) {\n                    this.scroller.appendChild(item);\n                }\n\n                // We need to show right scrollbar size\n                if (!fromCache) {\n                    this.scrollRunwayEnd += item.offsetHeight + 10; // make 10 a constant\n                }\n                itemTranslateY += item.offsetHeight + 10;\n                \n                this.physicalItems[itemIndex] = item;\n                // this.itemsCacheData.push(items[i]);\n                this.itemsCacheData[currentCacheDataLength + i] = items[i];\n            }\n            \n            // This uses the updated physicalItemIndex props\n            this.calculatePhysicalItemsIndex(items.length);\n\n            // Update runway translate to update scrollbar\n            this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n            this.requestInProgress = false;\n        }\n\n        loadItemsUp() {\n            this.requestInProgress = true;\n\n            let loadingItemTranslateY = this.firstPhysicalItemTranslateY;\n\n            for (let i = 9; i >= 0; i -= 1) {\n\n                const hasLoadingItem = this.loadingItems[i];\n                const loadingItem = hasLoadingItem ? this.loadingItems[i] : this.dataSource.createLoadingElement();\n\n                loadingItem.style.position = 'absolute';\n                loadingItem.style.transform = `translateY(${loadingItemTranslateY}px)`;\n                loadingItem.style.width = '92%';\n                loadingItem.classList.remove('invisible');\n\n                // If loading item not in DOM then add it\n                if (!hasLoadingItem) {\n                    // addingElems = true;\n                    // frag.appendChild(loadingItem);\n                    this.scroller.appendChild(loadingItem);\n                }\n\n                this.loadingItems[i] = loadingItem;\n\n                loadingItemTranslateY -= (this.loadingItemHeight + 10);\n            }\n\n            this.populateItemsTop();\n        }\n\n        populateItemsTop() {\n\n            const itemBeforeFirstPhysicalItemIndex = this.firstPhysicalItemIndex - 1;\n\n            let itemTranslateY = this.firstPhysicalItemTranslateY;\n\n            for (let i = itemBeforeFirstPhysicalItemIndex; i > itemBeforeFirstPhysicalItemIndex - 10; i -= 1) {\n\n                if (this.loadingItems[i % 10]) {\n                    this.loadingItems[i % 10].classList.add('invisible');\n                }\n\n                const reusableItemIndex = i % this.PHYSICAL_ITEMS;\n                const hasItem = this.physicalItems[reusableItemIndex];\n                const item = hasItem ? this.dataSource.render(this.itemsCacheData[i], this.physicalItems[reusableItemIndex]) : this.dataSource.render(this.itemsCacheData[i]);\n\n                item.style.position = 'absolute';\n                item.style.transform = `translateY(${itemTranslateY}px)`;\n                // We need these values to animate elements when removed\n                item.dataset.translateY = itemTranslateY;\n                item.style.width = '92%';\n\n                // this should never go inside when scrolling up otherwise we messed up\n                if (!hasItem) {\n                    this.scroller.appendChild(item);\n                }\n\n                itemTranslateY -= (item.offsetHeight + 10);\n                \n                this.physicalItems[reusableItemIndex] = item;\n            }\n\n            this.calculatePhysicalItemsIndex(-10);\n            this.requestInProgress = false;\n        }\n\n        calculatePhysicalItemsIndex(itemsLength) {\n\n            this.lastPhysicalItemIndex += itemsLength;\n            this.firstPhysicalItemIndex = Math.max(0, this.lastPhysicalItemIndex - (this.PHYSICAL_ITEMS - 1));\n            this.middlePhysicalItemIndex = this.firstPhysicalItemIndex + ((this.lastPhysicalItemIndex - this.firstPhysicalItemIndex + 1) / 2);\n\n            this.firstPhysicalItem = this.physicalItems[this.firstPhysicalItemIndex % this.PHYSICAL_ITEMS];\n            this.lastPhysicalItem = this.physicalItems[this.lastPhysicalItemIndex % this.PHYSICAL_ITEMS];\n\n            // this is used for the next\n            this.firstPhysicalItemTranslateY = parseInt(this.firstPhysicalItem.dataset.translateY, 10) - (this.firstPhysicalItem.offsetHeight + 10);\n            this.lastPhysicalItemTranslateY = parseInt(this.lastPhysicalItem.dataset.translateY, 10) + (this.lastPhysicalItem.offsetHeight + 10);\n        }\n\n        onTouchStart(e) {\n            if (this.target) {\n                return;\n            }\n\n            if (!e.target.classList.contains('scroller__item')) {\n                return;\n            }\n\n            this.target = e.target;\n            this.targetBCR = this.target.getBoundingClientRect();\n            this.startX = e.touches[0].pageX;\n            this.currentX = this.startX;\n            // this.translateX = 0;\n            this.draggingItem = true;\n\n            this.target.style.willChange = 'transform';\n\n            requestAnimationFrame(() => this.update());\n\n            // e.preventDefault();\n        }\n\n        onTouchMove(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.currentX = e.touches[0].pageX;\n        }\n\n        onTouchEnd(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.targetX = 0;\n            let translateX = this.currentX - this.startX;\n            const threshold = this.targetBCR.width * 0.35;\n\n            if (Math.abs(translateX) > threshold) {\n                this.targetX = (translateX > 0) ? this.targetBCR.width : -this.targetBCR.width;\n            }\n\n            this.draggingItem = false;\n        }\n\n        update() {\n            requestAnimationFrame(() => this.update());\n\n            if (!this.target) {\n                return;\n            }\n\n            if (this.draggingItem) {\n                this.translateX = this.currentX - this.startX;\n            } else {\n                this.translateX += (this.targetX - this.translateX) / 4;\n            }\n\n            const normalizedDragDistance = (Math.abs(this.translateX) / this.targetBCR.width);\n            const opacity = 1 - Math.pow(normalizedDragDistance, 3);\n\n            // Since we are manipulating elements through translates we need to keep translateY\n            this.target.style.transform = `translate(${this.translateX}px, ${this.target.dataset.translateY}px)`;\n            this.target.style.opacity = opacity;\n\n            // User has not finished dragging\n            if (this.draggingItem) {\n                return;\n            }\n\n            const isNearlyAtStart = (Math.abs(this.translateX) < 0.01);\n            const isNearlyInvisible = (opacity < 0.01);\n\n            if (isNearlyInvisible) {\n\n                if (!this.target || !this.target.parentNode) {\n                    return;\n                }\n\n                this.scrollRunwayEnd -= this.target.offsetHeight + 10;\n                this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n\n                const targetTranslateY = this.target.dataset.translateY;\n                this.scroller.removeChild(this.target);\n                const targetIndex = this.physicalItems.indexOf(this.target);\n                const targetDataIndex = parseInt(this.target.dataset.id, 10);\n                this.physicalItems.splice(targetIndex, 1);\n                this.itemsCacheData.splice(targetDataIndex - 1, 1);\n\n                this.animateOtherItemsIntoPosition(targetIndex, targetTranslateY);\n\n                // if (this.physicalItems.length < 6) {\n                //     this.loadItems();\n                // }\n\n            } else if (isNearlyAtStart) {\n                this.resetTarget();\n            }\n        }\n\n        animateOtherItemsIntoPosition(startIndex, translateY) {\n            // If removed card was the last one, there is nothing to animate.\n            // Remove the target\n            if (startIndex === this.physicalItems.length) {\n                this.resetTarget();\n                return;\n            }\n\n            const onAnimationComplete = (e) => {\n                const item = e.target;\n                item.removeEventListener('transitionend', onAnimationComplete);\n                item.style.transition = '';\n                // item.style.transform = '';\n                // item.style.transform = `translateY(${parseInt(item.dataset.translateY, 10) - this.targetBCR.height - 10}px)`;\n                // item.dataset.translateY\n\n                this.resetTarget();\n            };\n\n            // Set up all card animations\n            for (let i = 0; i < this.physicalItems.length; i += 1) {\n                const item = this.physicalItems[i];\n\n                if (item.dataset.translateY > translateY) {\n                    // Move the card down then slide it up.\n                    // item.style.transform = `translateY(${this.targetBCR.height + 10}px)`;\n                    item.style.transform = `translateY(${item.dataset.translateY}px)`;\n                    item.addEventListener('transitionend', (e) => onAnimationComplete(e));\n                }\n            }\n\n            // Now init them\n            requestAnimationFrame(_ => {\n                for (let i = 0; i < this.physicalItems.length; i += 1) {\n                    const item = this.physicalItems[i];\n\n                    if (item.dataset.translateY > translateY) {\n                        item.style.transition = `transform 150ms cubic-bezier(0,0,0.31,1)`;\n                        item.style.transform = `translateY(${parseInt(item.dataset.translateY, 10) - this.targetBCR.height - 10}px)`;\n                        item.dataset.translateY = parseInt(item.dataset.translateY, 10) - this.targetBCR.height - 10;\n                    }\n                }\n            });\n        }\n\n        resetTarget() {\n            if (!this.target) {\n                return;\n            }\n\n            this.target.style.willChange = 'initial';\n            // this.target.style.transform = 'none';\n            this.target.style.transform = `translateY(${this.target.dataset.translateY}px)`;\n            this.target = null;\n        }\n    }\n\n    return InfiniteScroller;\n});","define('components/infinite-scroller-v2',[\n], function() {\n    'use strict';\n    \n    const RUNWAY_ITEMS = 50;\n    const RUNWAY_ITEMS_OPPOSITE = 10;\n    const SCROLL_RUNWAY = 2000;\n    const ANIMATION_DURATION_MS = 200;\n\n    class InfiniteScroller {\n\n        constructor(scroller, dataSource, options) {\n            this.scroller = scroller;\n            this.dataSource = dataSource;\n\n            this.anchorScrollTop = 0;\n            this.loadingItemHeight = 0;\n            this.loadingItemWidth = 0;\n            this.loadingItems = [];\n\n            this.firstAttachedItem = 0;\n            this.lastAttachedItem = 0;\n            this.virtualItems = [];\n            this.physicalItems = [];\n\n            this.virtualItemsCount = 0;\n            this.physicalItemsCount = 0;\n\n            this.items = [];\n            this.loadedItems = 0;\n            this.requestInProgress = false;\n\n            this.swipeable = options.swipeable;\n\n            // Reference to current item\n            this.target = null;\n            this.targetBCR = null;\n            this.targetX = 0;\n            this.startX = 0;\n            this.currentX = 0;\n            this.translateX = 0;\n            this.draggingItem = false;\n\n            // Create element to manage top height\n            this.anchorItem = document.createElement('div');\n            this.anchorItemHeight = 0;\n            // this.anchorItem.style.position = 'absolute';\n            this.anchorItem.style.height = '1px';\n            this.anchorItem.style.width = '1px';\n            // this.anchorItem.style.transition = 'transform 0.2s';\n            this.scroller.appendChild(this.anchorItem);\n\n            // Create element to force scroll\n            this.scrollRunway = document.createElement('div');\n            this.scrollRunwayEndBefore = 0;\n            this.scrollRunwayEnd = 0;\n            this.scrollRunway.style.position = 'absolute';\n            this.scrollRunway.style.height = '1px';\n            this.scrollRunway.style.width = '1px';\n            this.scrollRunway.style.transition = 'transform 0.2s';\n            this.scroller.appendChild(this.scrollRunway);\n\n            this.previousScrollTop = 0;\n\n            this.addEventListeners();\n\n            this.count = 0;\n\n            // this.onResize();\n            // this.loadItems();\n            this.loadItemsExp(false);\n        }\n\n        addEventListeners() {\n            window.addEventListener('resize', (e) => this.onResize(e));\n            this.scroller.addEventListener('scroll', (e) => this.onScroll(e));\n\n            if (this.swipeable) {\n                this.scroller.addEventListener('touchstart', (e) => this.onTouchStart(e));\n                this.scroller.addEventListener('touchmove', (e) => this.onTouchMove(e));\n                this.scroller.addEventListener('touchend', (e) => this.onTouchEnd(e));\n            }\n        }\n\n        loadItems() {\n            this.requestInProgress = true;\n\n            // loaidng items\n            for (let i = 0; i < 10; i += 1) {\n                const loadingItem = this.dataSource.createLoadingElement();\n                this.loadingItems[i] = loadingItem;\n                this.scroller.appendChild(loadingItem);\n            }\n\n            // 20 items\n            // this.dataSource.next().then((response) => {\n            //     this.populateItems(response);\n            //     return this.dataSource.next();\n            // }).then((response) => {\n            //     this.populateItems(response);\n            // });\n\n            // 10 items\n            this.dataSource.next().then((response) => {\n                this.populateItems(response);\n                return this.dataSource.next();\n            });\n        }\n\n        loadItemsExp(firstLoad) {\n            if (this.count > 15) {\n                return;\n            }\n\n            this.requestInProgress = true;\n            let loadingHeight = this.scrollRunwayEnd;\n\n            // loaidng items\n            for (let i = 0; i < 10; i += 1) {\n                const hasLoadingItem = this.loadingItems[i];\n                const loadingItem = hasLoadingItem ? this.loadingItems[i] : this.dataSource.createLoadingElement();\n                \n                this.loadingItems[i] = loadingItem;\n\n                // Experimental - Transform instead of removing elements\n                loadingItem.style.position = 'absolute';\n                loadingItem.style.transform = `translateY(${loadingHeight}px)`;\n                loadingItem.style.width = '92%';\n                loadingItem.classList.remove('invisible');\n\n                // If loading item not in DOM then add it\n                if (!hasLoadingItem) {\n                    this.scroller.appendChild(loadingItem);\n                }\n\n                // Experimental - Transform instead of removing elements\n                loadingHeight += loadingItem.offsetHeight + 10;\n            }\n\n            // console.log('LOADING RUNWAY END: ', this.scrollRunwayEnd);\n            // this.scrollRunway.style.transform = `translate(0,${this.loadingHeight}px)`;\n\n            if (firstLoad) {\n                console.log('first load');\n                let firstLoadItems = [];\n                this.dataSource.next().then((response) => {\n                    firstLoadItems = firstLoadItems.concat(response);\n                    return this.dataSource.next();\n                }).then((response) => {\n                    firstLoadItems = firstLoadItems.concat(response);\n                    this.populateItemsExp(firstLoadItems);\n                });\n            } else {\n                // 10 items\n                this.dataSource.next().then((response) => {\n                    this.populateItemsExp(response);\n                    // return this.dataSource.next();\n                });\n            }\n        }\n\n        populateItems(items) {\n            // console.log('Loading: ', this.loadingItems);\n\n            for (let i = 0; i < items.length; i += 1) {\n\n                if (this.loadingItems[0]) {\n                    this.scroller.removeChild(this.loadingItems[0]);\n                    this.loadingItems.splice(0, 1);\n                }\n                const item = this.dataSource.render(items[i]);\n                this.scroller.appendChild(item);\n\n                this.scrollRunwayEnd += item.offsetHeight + 10;\n                this.items.push(item);\n            }\n\n            this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n            this.requestInProgress = false;\n        }\n\n        populateItemsExp(items) {\n            console.log('Hello');\n            // console.log('Loading: ', this.loadingItems);\n\n            for (let i = 0; i < items.length; i += 1) {\n\n                if (this.loadingItems[i]) {\n                    this.loadingItems[i].classList.add('invisible');\n                }\n\n                const itemIndex = (this.firstAttachedItem + i) % 20;\n                const hasItem = this.virtualItems[itemIndex] && this.virtualItems.length === 20;\n\n                const item = hasItem ? this.dataSource.render(items[i], this.virtualItems[itemIndex]) : this.dataSource.render(items[i]);\n\n                // Experimental - Transform instead of removing elements\n                item.style.position = 'absolute';\n                item.style.transform = `translateY(${this.scrollRunwayEnd}px)`;\n                item.style.width = '92%';\n\n                if (!hasItem) {\n                    this.scroller.appendChild(item);\n                }\n\n                this.scrollRunwayEnd += item.offsetHeight + 10;\n                \n                this.virtualItems[itemIndex] = item;\n                this.items.push(item);\n            }\n\n            this.lastAttachedItem = this.firstAttachedItem + (items.length - 1);\n\n            this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n            this.requestInProgress = false;\n            this.count += 1;\n        }\n\n        onResize(e) {\n            const loadingItem = this.dataSource.createLoadingElement();\n            this.scroller.appendChild(loadingItem);\n            this.loadingItemHeight = loadingItem.offsetHeight;\n            this.loadingItemWidth = loadingItem.offsetWidth;\n            this.scroller.removeChild(loadingItem);\n\n            // Reset cahced size of items in the scroller\n            for (let i = 0; i < this.items.length; i += 1) {\n                this.items[i].height = this.items[i].width = 0;\n            }\n\n            this.onScroll();\n        }\n\n        /**\n         * It then updates the visible\n         * elements, requesting more items from the dataSource if we have scrolled\n         * past the end of currently available content.\n         */\n        onScroll(e) {\n            const delta = this.scroller.scrollTop - this.previousScrollTop;\n            this.previousScrollTop = this.scroller.scrollTop;\n\n            if (delta > 0) {\n                // scrolling down\n                const scrollBoundary = this.scroller.scrollTop + this.scroller.offsetHeight + 200;\n\n                if (!this.requestInProgress && (scrollBoundary > this.scroller.scrollHeight)) {\n                    // this.loadItems();\n\n                    this.firstAttachedItem = this.lastAttachedItem + 1;\n\n                    this.loadItemsExp();\n                    // this.fill(this.anchorItem.index - RUNWAY_ITEMS, lastScreenItem.index + RUNWAY_ITEMS_OPPOSITE);\n                }\n            } else {\n                // scrolling up\n                // this.fill(this.anchorItem.index - RUNWAY_ITEMS_OPPOSITE, lastScreenItem.index + RUNWAY_ITEMS);\n            }\n        }\n\n        /**\n         * Sets the range of items which should be attached and attaches those items\n         */\n        fill(start, end) {\n            this.firstAttachedItem = Math.max(0, start);\n            this.lastAttachedItem = end;\n            this.attachContent();\n        }\n\n        getLoadingItem() {\n            const loadingItem = this.loadingItems.pop();\n            if (loadingItem) {\n                return loadingItem;\n            }\n\n            return this.dataSource.createLoadingElement();\n        }\n\n        attachContent(start, end) {\n            // here some logic to go fetch items i.e. scrolling down and not more virtualItems\n            // and just loading from virtual items\n\n        }\n\n        addItem() {\n            this.items.push({\n                data: null,\n                node: null\n            });\n        }\n\n        addContent(items) {\n            this.requestInProgress = false;\n            for (let i = 0; i < items.length; i += 1) {\n                this.addItem();\n                this.items[this.loadedItems++].data = items[i];\n            }\n            this.attachContent();\n        }\n\n        onTouchStart(e) {\n            if (this.target) {\n                return;\n            }\n\n            if (!e.target.classList.contains('scroller__item')) {\n                return;\n            }\n\n            this.target = e.target;\n            this.targetBCR = this.target.getBoundingClientRect();\n            this.startX = e.touches[0].pageX;\n            this.currentX = this.startX;\n            // this.translateX = 0;\n            this.draggingItem = true;\n\n            this.target.style.willChange = 'transform';\n\n            requestAnimationFrame(() => this.update());\n\n            // e.preventDefault();\n        }\n\n        onTouchMove(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.currentX = e.touches[0].pageX;\n        }\n\n        onTouchEnd(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.targetX = 0;\n            let translateX = this.currentX - this.startX;\n            const threshold = this.targetBCR.width * 0.35;\n\n            if (Math.abs(translateX) > threshold) {\n                this.targetX = (translateX > 0) ? this.targetBCR.width : -this.targetBCR.width;\n            }\n\n            this.draggingItem = false;\n        }\n\n        update() {\n            requestAnimationFrame(() => this.update());\n\n            if (!this.target) {\n                return;\n            }\n\n            if (this.draggingItem) {\n                this.translateX = this.currentX - this.startX;\n            } else {\n                this.translateX += (this.targetX - this.translateX) / 4;\n            }\n\n            const normalizedDragDistance = (Math.abs(this.translateX) / this.targetBCR.width);\n            const opacity = 1 - Math.pow(normalizedDragDistance, 3);\n\n            this.target.style.transform = `translateX(${this.translateX}px)`;\n            this.target.style.opacity = opacity;\n\n            // User has not finished dragging\n            if (this.draggingItem) {\n                return;\n            }\n\n            const isNearlyAtStart = (Math.abs(this.translateX) < 0.01);\n            const isNearlyInvisible = (opacity < 0.01);\n\n            if (isNearlyInvisible) {\n\n                if (!this.target || !this.target.parentNode) {\n                    return;\n                }\n\n                this.scrollRunwayEnd -= this.target.offsetHeight + 10;\n                this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n\n                this.scroller.removeChild(this.target);\n                const targetIndex = this.items.indexOf(this.target);\n                this.items.splice(targetIndex, 1);\n\n                this.animateOtherItemsIntoPosition(targetIndex);\n\n                if (this.items.length < 6) {\n                    this.loadItems();\n                }\n\n            } else if (isNearlyAtStart) {\n                this.resetTarget();\n            }\n        }\n\n        animateOtherItemsIntoPosition(startIndex) {\n            // If removed card was the last one, there is nothing to animate.\n            // Remove the target\n            if (startIndex === this.items.length) {\n                this.resetTarget();\n                return;\n            }\n\n            const onAnimationComplete = (e) => {\n                const item = e.target;\n                item.removeEventListener('transitionend', onAnimationComplete);\n                item.style.transition = '';\n                item.style.transform = '';\n\n                this.resetTarget();\n            };\n\n            // Set up all card animations\n            for (let i = startIndex; i < this.items.length; i += 1) {\n                const item = this.items[i];\n\n                // Move the card down then slide it up.\n                item.style.transform = `translateY(${this.targetBCR.height + 10}px)`;\n                item.addEventListener('transitionend', (e) => onAnimationComplete(e));\n            }\n\n            // Now init them\n            requestAnimationFrame(_ => {\n                for (let i = startIndex; i < this.items.length; i += 1) {\n                    const item = this.items[i];\n\n                    // Move the card down then slide it up, with delay according to \"distance\"\n                    // item.style.transition = `transform 150ms cubic-bezier(0,0,0.31,1) ${i*50}ms`;\n                    item.style.transition = `transform 150ms cubic-bezier(0,0,0.31,1)`;\n                    item.style.transform = '';\n                }\n            });\n        }\n\n        resetTarget() {\n            if (!this.target) {\n                return;\n            }\n\n            this.target.style.willChange = 'initial';\n            this.target.style.transform = 'none';\n            this.target = null;\n        }\n    }\n\n    return InfiniteScroller;\n});","define('components/infinite-scroller',[\n], function() {\n    'use strict';\n    \n    const RUNWAY_ITEMS = 50;\n    const RUNWAY_ITEMS_OPPOSITE = 10;\n    const SCROLL_RUNWAY = 2000;\n    const ANIMATION_DURATION_MS = 200;\n    const PHYSICAL_ITEMS = 20;\n\n    class InfiniteScroller {\n\n        constructor(scroller, dataSource, options) {\n            this.scroller = scroller;\n            this.dataSource = dataSource;\n\n            this.anchorScrollTop = 0;\n            this.loadingItemHeight = 0;\n            this.loadingItemWidth = 0;\n            this.loadingItems = [];\n\n            this.firstAttachedItem = 0;\n            this.lastAttachedItem = 0;\n            this.virtualItems = [];\n            this.physicalItems = [];\n\n            this.virtualItemsCount = 0;\n            this.physicalItemsCount = 0;\n\n            this.items = [];\n            this.itemsData = [];\n            this.loadedItems = 0;\n            this.requestInProgress = false;\n\n            this.swipeable = options.swipeable;\n\n            // Reference to current item\n            this.target = null;\n            this.targetBCR = null;\n            this.targetX = 0;\n            this.startX = 0;\n            this.currentX = 0;\n            this.translateX = 0;\n            this.draggingItem = false;\n\n            // Create element to manage top height\n            this.anchorItem = document.createElement('div');\n            this.anchorItemHeight = 0;\n            this.anchorItem.style.height = '0px';\n            this.anchorItem.style.width = '1px';\n            this.scroller.appendChild(this.anchorItem);\n\n            // Create element to force scroll\n            this.scrollRunway = document.createElement('div');\n            this.scrollRunwayEndBefore = 0;\n            this.scrollRunwayEnd = 0;\n            this.scrollRunway.style.position = 'absolute';\n            this.scrollRunway.style.height = '1px';\n            this.scrollRunway.style.width = '1px';\n            this.scrollRunway.style.transition = 'transform 0.2s';\n            this.scroller.appendChild(this.scrollRunway);\n\n            this.previousScrollTop = 0;\n\n            this.addEventListeners();\n\n            this.count = 0;\n\n            // this.onResize();\n            // this.loadItems();\n            this.loadItems();\n        }\n\n        addEventListeners() {\n            window.addEventListener('resize', (e) => this.onResize(e));\n            this.scroller.addEventListener('scroll', (e) => this.onScroll(e));\n\n            if (this.swipeable) {\n                this.scroller.addEventListener('touchstart', (e) => this.onTouchStart(e));\n                this.scroller.addEventListener('touchmove', (e) => this.onTouchMove(e));\n                this.scroller.addEventListener('touchend', (e) => this.onTouchEnd(e));\n            }\n        }\n\n        loadItems() {\n            if (this.count > 15) {\n                return;\n            }\n\n            this.requestInProgress = true;\n\n            // loaidng items\n            for (let i = 0; i < 10; i += 1) {\n                const loadingItem = this.dataSource.createLoadingElement();\n                this.loadingItems[i] = loadingItem;\n                this.scroller.appendChild(loadingItem);\n            }\n\n            // 10 items\n            this.dataSource.next().then((response) => {\n                this.populateItems(response);\n            });\n        }\n\n        populateItems(items) {\n            // console.log('Loading: ', this.loadingItems);\n\n            for (let i = 0; i < items.length; i += 1) {\n\n                if (this.loadingItems[0]) {\n                    this.scroller.removeChild(this.loadingItems[0]);\n                    this.loadingItems.splice(0, 1);\n                }\n                const item = this.dataSource.render(items[i]);\n                this.scroller.appendChild(item);\n\n                this.scrollRunwayEnd += item.offsetHeight + 10;\n                this.items.push(item);\n            }\n\n            this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n            this.requestInProgress = false;\n            this.count += 1;\n        }\n\n        onResize(e) {\n            const loadingItem = this.dataSource.createLoadingElement();\n            this.scroller.appendChild(loadingItem);\n            this.loadingItemHeight = loadingItem.offsetHeight;\n            this.loadingItemWidth = loadingItem.offsetWidth;\n            this.scroller.removeChild(loadingItem);\n\n            // Reset cahced size of items in the scroller\n            for (let i = 0; i < this.items.length; i += 1) {\n                this.items[i].height = this.items[i].width = 0;\n            }\n\n            this.onScroll();\n        }\n\n        /**\n         * It then updates the visible\n         * elements, requesting more items from the dataSource if we have scrolled\n         * past the end of currently available content.\n         */\n        onScroll(e) {\n            const delta = this.scroller.scrollTop - this.previousScrollTop;\n            this.previousScrollTop = this.scroller.scrollTop;\n\n            if (delta > 0) {\n                // scrolling down\n                const scrollBoundary = this.scroller.scrollTop + this.scroller.offsetHeight + 200;\n\n                if (!this.requestInProgress && (scrollBoundary > this.scroller.scrollHeight)) {\n                    // this.loadItems();\n\n                    this.firstAttachedItem = this.lastAttachedItem + 1;\n\n                    this.loadItems();\n                    // this.fill(this.anchorItem.index - RUNWAY_ITEMS, lastScreenItem.index + RUNWAY_ITEMS_OPPOSITE);\n                }\n            } else {\n                // scrolling up\n                // this.fill(this.anchorItem.index - RUNWAY_ITEMS_OPPOSITE, lastScreenItem.index + RUNWAY_ITEMS);\n            }\n        }\n\n        /**\n         * Sets the range of items which should be attached and attaches those items\n         */\n        fill(start, end) {\n            this.firstAttachedItem = Math.max(0, start);\n            this.lastAttachedItem = end;\n            this.attachContent();\n        }\n\n        getLoadingItem() {\n            const loadingItem = this.loadingItems.pop();\n            if (loadingItem) {\n                return loadingItem;\n            }\n\n            return this.dataSource.createLoadingElement();\n        }\n\n        attachContent(start, end) {\n            // here some logic to go fetch items i.e. scrolling down and not more virtualItems\n            // and just loading from virtual items\n\n        }\n\n        addItem() {\n            this.items.push({\n                data: null,\n                node: null\n            });\n        }\n\n        addContent(items) {\n            this.requestInProgress = false;\n            for (let i = 0; i < items.length; i += 1) {\n                this.addItem();\n                this.items[this.loadedItems++].data = items[i];\n            }\n            this.attachContent();\n        }\n\n        onTouchStart(e) {\n            if (this.target) {\n                return;\n            }\n\n            if (!e.target.classList.contains('scroller__item')) {\n                return;\n            }\n\n            this.target = e.target;\n            this.targetBCR = this.target.getBoundingClientRect();\n            this.startX = e.touches[0].pageX;\n            this.currentX = this.startX;\n            // this.translateX = 0;\n            this.draggingItem = true;\n\n            this.target.style.willChange = 'transform';\n\n            requestAnimationFrame(() => this.update());\n\n            // e.preventDefault();\n        }\n\n        onTouchMove(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.currentX = e.touches[0].pageX;\n        }\n\n        onTouchEnd(e) {\n            if (!this.target) {\n                return;\n            }\n\n            this.targetX = 0;\n            let translateX = this.currentX - this.startX;\n            const threshold = this.targetBCR.width * 0.35;\n\n            if (Math.abs(translateX) > threshold) {\n                this.targetX = (translateX > 0) ? this.targetBCR.width : -this.targetBCR.width;\n            }\n\n            this.draggingItem = false;\n        }\n\n        update() {\n            requestAnimationFrame(() => this.update());\n\n            if (!this.target) {\n                return;\n            }\n\n            if (this.draggingItem) {\n                this.translateX = this.currentX - this.startX;\n            } else {\n                this.translateX += (this.targetX - this.translateX) / 4;\n            }\n\n            const normalizedDragDistance = (Math.abs(this.translateX) / this.targetBCR.width);\n            const opacity = 1 - Math.pow(normalizedDragDistance, 3);\n\n            this.target.style.transform = `translateX(${this.translateX}px)`;\n            this.target.style.opacity = opacity;\n\n            // User has not finished dragging\n            if (this.draggingItem) {\n                return;\n            }\n\n            const isNearlyAtStart = (Math.abs(this.translateX) < 0.01);\n            const isNearlyInvisible = (opacity < 0.01);\n\n            if (isNearlyInvisible) {\n\n                if (!this.target || !this.target.parentNode) {\n                    return;\n                }\n\n                // Update runway (i.e. update scrollbar)\n                this.scrollRunwayEnd -= this.target.offsetHeight + 10;\n                this.scrollRunway.style.transform = `translate(0,${this.scrollRunwayEnd}px)`;\n\n                this.scroller.removeChild(this.target);\n                const targetIndex = this.items.indexOf(this.target);\n                this.items.splice(targetIndex, 1);\n\n                this.animateOtherItemsIntoPosition(targetIndex);\n\n                if (this.items.length < 6) {\n                    this.loadItems();\n                }\n\n            } else if (isNearlyAtStart) {\n                this.resetTarget();\n            }\n        }\n\n        animateOtherItemsIntoPosition(startIndex) {\n            // If removed card was the last one, there is nothing to animate.\n            // Remove the target\n            if (startIndex === this.items.length) {\n                this.resetTarget();\n                return;\n            }\n\n            const onAnimationComplete = (e) => {\n                const item = e.target;\n                item.removeEventListener('transitionend', onAnimationComplete);\n                item.style.transition = '';\n                item.style.transform = '';\n\n                this.resetTarget();\n            };\n\n            // Set up all card animations\n            for (let i = startIndex; i < this.items.length; i += 1) {\n                const item = this.items[i];\n\n                // Move the card down then slide it up.\n                item.style.transform = `translateY(${this.targetBCR.height + 10}px)`;\n                item.addEventListener('transitionend', (e) => onAnimationComplete(e));\n            }\n\n            // Now init them\n            requestAnimationFrame(_ => {\n                for (let i = startIndex; i < this.items.length; i += 1) {\n                    const item = this.items[i];\n\n                    // Move the card down then slide it up, with delay according to \"distance\"\n                    // item.style.transition = `transform 150ms cubic-bezier(0,0,0.31,1) ${i*50}ms`;\n                    item.style.transition = `transform 150ms cubic-bezier(0,0,0.31,1)`;\n                    item.style.transform = '';\n                }\n            });\n        }\n\n        resetTarget() {\n            if (!this.target) {\n                return;\n            }\n\n            this.target.style.willChange = 'initial';\n            this.target.style.transform = 'none';\n            this.target = null;\n        }\n    }\n\n    return InfiniteScroller;\n});","define('datasource/messages',[\n], function() {\n    'use strict';\n    \n    class Messages {\n        constructor(options) {\n            this.loadingTemplate = document.querySelector('#templates .scroller__item--loading');\n            this.messageTemplate = document.querySelector('#templates .scroller__item');\n            \n            this.url = options.url;\n            this.dataEndpoint = options.dataEndpoint;\n            this.dataUrl = `${this.url}${this.dataEndpoint}`;\n\n            this.nextItem = 0;\n\n            this.nextPageToken = null;\n        }\n\n        /**\n         * Fetch items from datasource.\n         */\n        fetch(obj) {\n            return new Promise((resolve, reject) => {\n\n                let params = obj.params;\n                if (params && typeof params === 'object') {\n                    params = Object.keys(params).map((key) => {\n                        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n                    }).join('&');\n                }\n\n                const url = params ? obj.url + '?' + params : obj.url;\n\n                let xhr = new XMLHttpRequest();\n                xhr.open(obj.method || 'GET', url);\n\n                xhr.onload = () => {\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        resolve(xhr.response);\n                    } else {\n                        reject(xhr.statusText);\n                    }\n                };\n\n                xhr.onerror = () => {\n                    reject(xhr.statusText);\n                };\n\n                // let params = obj.params;\n                // if (params && typeof params === 'object') {\n                //     params = Object.keys(params).map((key) => {\n                //         return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n                //     }).join('&');\n                // }\n                xhr.send();\n            });\n        }\n\n        next() {\n            let options = {\n                method: 'GET',\n                url: this.dataUrl\n            };\n\n            if (this.nextPageToken) {\n                options.params = {\n                    pageToken: this.nextPageToken\n                };\n                // Object.assign(options, {\n                //     params: {\n                //         pageToken: this.nextPageToken\n                //     }\n                // });\n            }\n\n            return this.fetch(options).then((response) => {\n                let jsonResponse = JSON.parse(response);\n                this.nextPageToken = jsonResponse.pageToken;\n                return jsonResponse.messages;\n            });\n\n            // return this.fetch(options);\n        }\n\n        /**\n         * Create a loading element, all loading elements are identical\n         */\n        createLoadingElement() {\n            return this.loadingTemplate.cloneNode(true);\n        }\n\n        /**\n         * Render an item, reusing the provided div if provided\n         */\n        render(item, div) {\n            div = div || this.messageTemplate.cloneNode(true);\n\n            div.dataset.id = item.id;\n\n            div.querySelector('.card__avatar').src = `${this.url}${item.author.photoUrl}`;\n            div.querySelector('.card__title').textContent = item.author.name;\n            div.querySelector('.card__subtitle').textContent = this.timeSince(new Date(item.updated)); //item.updated.toString();\n            div.querySelector('.card__content').textContent = item.content;\n\n            return div;\n        }\n\n        timeSince(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            let seconds = Math.floor((new Date() - date) / 1000),\n                interval = Math.floor(seconds / 31536000);\n\n            if (interval >= 1) {\n                return `${interval} year${interval > 1 ? 's' : ''} ago`;\n            }\n\n            interval = Math.floor(seconds / 2592000);\n            if (interval >= 1) {\n                return `${interval} month${interval > 1 ? 's' : ''} ago`;\n            }\n\n            interval = Math.floor(seconds / 86400);\n            if (interval >= 1) {\n                return `${interval} day${interval > 1 ? 's' : ''} ago`;\n            }\n\n            interval = Math.floor(seconds / 3600);\n            if (interval >= 1) {\n                return `${interval} hour${interval > 1 ? 's' : ''} ago`;\n            }\n\n            interval = Math.floor(seconds / 3600);\n            if (interval >= 1) {\n                return `${interval} minute${interval > 1 ? 's' : ''} ago`;\n            }\n\n            return `${interval} second${interval > 1 ? 's' : ''} ago`;\n        }\n    }\n\n    return Messages;\n});"]}